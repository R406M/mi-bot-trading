import os
import json
import pandas as pd
import logging
from flask import Flask, request
from kucoin.client import Trade, Market

# Configuración del logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Crear la aplicación Flask
app = Flask(__name__)

# Claves de API de KuCoin (se deben configurar en "Secrets" de Replit)
KUCOIN_API_KEY = os.getenv("KUCOIN_API_KEY")
KUCOIN_SECRET_KEY = os.getenv("KUCOIN_SECRET_KEY")
KUCOIN_PASSPHRASE = os.getenv("KUCOIN_PASSPHRASE")

# Verificar si las claves están configuradas
if not all([KUCOIN_API_KEY, KUCOIN_SECRET_KEY, KUCOIN_PASSPHRASE]):
    raise EnvironmentError("Faltan claves de API de KuCoin en las variables de entorno.")

# Configurar cliente de KuCoin
trade_client = Trade(key=KUCOIN_API_KEY,
                     secret=KUCOIN_SECRET_KEY,
                     passphrase=KUCOIN_PASSPHRASE)
market_client = Market()

# Pares de trading y timeframe
SYMBOL = "DOGE-USDT"
TIMEFRAME = "15min"

# Límite máximo de operaciones en USDT
MAX_AMOUNT = 100  # Ajusta este valor según tu riesgo

# Cálculo del ATR
def calculate_atr(candles, period=14):
    # Crear un DataFrame con las 7 columnas que devuelve KuCoin
    df = pd.DataFrame(
        candles,
        columns=['timestamp', 'open', 'close', 'high', 'low', 'volume', 'turnover']
    )

    # Convertir las columnas a tipo float (KuCoin devuelve cadenas)
    df[['open', 'close', 'high', 'low', 'volume', 'turnover']] = df[['open', 'close', 'high', 'low', 'volume', 'turnover']].astype(float)

    # Calcular los valores necesarios para ATR
    df['high-low'] = df['high'] - df['low']
    df['high-close'] = abs(df['high'] - df['close'].shift(1))
    df['low-close'] = abs(df['low'] - df['close'].shift(1))
    df['tr'] = df[['high-low', 'high-close', 'low-close']].max(axis=1)
    df['atr'] = df['tr'].rolling(window=period).mean()

    # Retornar el último valor del ATR
    return df['atr'].iloc[-1]

# Función para abrir una orden
def place_order(action, amount, tp=None, sl=None):
    try:
        if action == "buy":
            order = trade_client.create_market_order(SYMBOL, "buy", funds=amount)
        elif action == "sell":
            order = trade_client.create_market_order(SYMBOL, "sell", funds=amount)
        logger.info(f"Orden {action} ejecutada: {order}")

        # Configurar Take-Profit y Stop-Loss si es necesario
        if tp or sl:
            logger.info(f"TP: {tp}, SL: {sl} configurados.")
        return order
    except Exception as e:
        logger.error(f"Error al ejecutar la orden: {e}")
        return None

# Ruta para recibir señales de TradingView
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"Señal recibida: {data}")

        # Validar token secreto
        secret_token = os.getenv("WEBHOOK_SECRET", "default_token")
        if data.get("token") != secret_token:
            return {"status": "error", "message": "Token inválido"}, 403

        # Validar acción y cantidad
        action = data.get("action")
        amount = data.get("amount", 50)  # Monto predeterminado
        if action not in ["buy", "sell"] or not isinstance(amount, (int, float)) or amount <= 0:
            return {"status": "error", "message": "Datos inválidos"}, 400

        # Control de riesgo: validamos que el monto no exceda el límite
        if amount > MAX_AMOUNT:
            return {"status": "error", "message": f"Monto excede el límite máximo de {MAX_AMOUNT} USDT"}, 400

        # Obtener datos históricos para calcular ATR
        candles = market_client.get_kline(SYMBOL, TIMEFRAME)
        atr = calculate_atr(candles)

        # Calcular TP y SL dinámicos
        last_price = float(candles[-1][2])  # Último precio alto
        tp = last_price + (2 * atr) if data["action"] == "buy" else last_price - (2 * atr)
        sl = last_price - (2 * atr) if data["action"] == "buy" else last_price + (2 * atr)

        # Ejecutar la orden
        order = place_order(data["action"], amount, tp, sl)
        return {"status": "success", "order": order}, 200
    except Exception as e:
        logger.error(f"Error en la recepción de la señal: {e}")
        return {"status": "error", "message": str(e)}, 500

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))  # Puerto asignado por Replit
    app.run(host="0.0.0.0", port=port)

