import os
import json
import logging
import pandas as pd
from flask import Flask, request
from kucoin.client import Trade, Market
import threading

# Configuración del logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Crear la aplicación Flask
app = Flask(__name__)

# Claves de API de KuCoin
KUCOIN_API_KEY = os.getenv("KUCOIN_API_KEY")
KUCOIN_SECRET_KEY = os.getenv("KUCOIN_SECRET_KEY")
KUCOIN_PASSPHRASE = os.getenv("KUCOIN_PASSPHRASE")

# Verificar si las claves están configuradas
if not all([KUCOIN_API_KEY, KUCOIN_SECRET_KEY, KUCOIN_PASSPHRASE]):
    raise EnvironmentError("Faltan claves de API de KuCoin en las variables de entorno.")

# Configurar cliente de KuCoin
trade_client = Trade(key=KUCOIN_API_KEY,
                     secret=KUCOIN_SECRET_KEY,
                     passphrase=KUCOIN_PASSPHRASE)
market_client = Market()

# Parámetros de trading
SYMBOL = "DOGE-USDT"
TIMEFRAME = "5min"  # Temporalidad ajustada
MAX_AMOUNT = 10  # Límite máximo por operación
TP_VALUE = 0.2  # Take Profit fijo en USDT
SL_VALUE = 10  # Stop Loss fijo en USDT

# Variable para controlar si una operación está activa
trade_active = False


# Función para abrir una orden
def place_order(action, amount):
    global trade_active
    try:
        if action == "buy":
            order = trade_client.create_market_order(SYMBOL, "buy", funds=amount)
        elif action == "sell":
            order = trade_client.create_market_order(SYMBOL, "sell", funds=amount)

        logger.info(f"Orden {action} ejecutada: {order}")
        trade_active = True  # Indicar que hay una operación activa
        return order
    except Exception as e:
        logger.error(f"Error al ejecutar la orden: {e}")
        return None


# Función para monitorear TP y SL
def monitor_tp_sl(action, entry_price):
    global trade_active
    try:
        while trade_active:
            ticker = market_client.get_ticker(SYMBOL)
            current_price = float(ticker['price'])

            if action == "buy":
                if current_price >= entry_price + TP_VALUE:
                    logger.info("Take Profit alcanzado (Buy). Cerrando operación.")
                    trade_client.create_market_order(SYMBOL, "sell", funds=MAX_AMOUNT)
                    trade_active = False
                elif current_price <= entry_price - SL_VALUE:
                    logger.info("Stop Loss alcanzado (Buy). Cerrando operación.")
                    trade_client.create_market_order(SYMBOL, "sell", funds=MAX_AMOUNT)
                    trade_active = False

            elif action == "sell":
                if current_price <= entry_price - TP_VALUE:
                    logger.info("Take Profit alcanzado (Sell). Cerrando operación.")
                    trade_client.create_market_order(SYMBOL, "buy", funds=MAX_AMOUNT)
                    trade_active = False
                elif current_price >= entry_price + SL_VALUE:
                    logger.info("Stop Loss alcanzado (Sell). Cerrando operación.")
                    trade_client.create_market_order(SYMBOL, "buy", funds=MAX_AMOUNT)
                    trade_active = False
    except Exception as e:
        logger.error(f"Error monitoreando TP/SL: {e}")
        trade_active = False


# Ruta para recibir señales de TradingView
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"Señal recibida: {data}")

        # Validar token secreto
        secret_token = os.getenv("WEBHOOK_SECRET", "default_token")
        if data.get("token") != secret_token:
            logger.warning("Token inválido recibido.")
            return {"status": "error", "message": "Token inválido"}, 403

        # Validar si ya hay una operación activa
        if trade_active:
            return {"status": "error", "message": "Operación activa. Esperando cierre."}, 400

        # Validar acción
        action = data.get("action")
        if action not in ["buy", "sell"]:
            return {"status": "error", "message": "Acción inválida."}, 400

        # Consultar el precio actual
        ticker = market_client.get_ticker(SYMBOL)
        entry_price = float(ticker['price'])

        # Procesar acción "buy"
if action == "buy":
    try:
        # Consultar el saldo disponible en USDT
        account_balance = trade_client.get_account_balance("USDT")
        available_usdt = float(account_balance['available'])

        if available_usdt >= MAX_AMOUNT:  # Restringir al MAX_AMOUNT
            logger.info(f"Saldo suficiente en USDT: {available_usdt}. Ejecutando orden BUY con {MAX_AMOUNT} USDT.")
            order = place_order("buy", MAX_AMOUNT)
        else:
            logger.warning("No hay saldo suficiente en USDT para comprar.")
            return {"status": "error", "message": "No hay saldo suficiente en USDT para comprar."}, 400

    except Exception as e:
        logger.error(f"Error al consultar el saldo de USDT: {e}")
        return {"status": "error", "message": "Error al consultar el saldo de USDT."}, 500

# Procesar acción "sell"
elif action == "sell":
    try:
        # Consultar el saldo disponible de DOGE
        account_balance = trade_client.get_account_balance(SYMBOL.split("-")[0])  # "DOGE"
        available_doge = float(account_balance['available'])

        if available_doge >= MAX_AMOUNT:  # Restringir al MAX_AMOUNT
            logger.info(f"Saldo suficiente en DOGE: {available_doge}. Ejecutando orden SELL con {MAX_AMOUNT} DOGE.")
            order = place_order("sell", MAX_AMOUNT)
        else:
            logger.warning("No hay saldo suficiente en DOGE para vender.")
            return {"status": "error", "message": "No hay saldo suficiente en DOGE para vender."}, 400

    except Exception as e:
        logger.error(f"Error al consultar el saldo de DOGE: {e}")
        return {"status": "error", "message": "Error al consultar el saldo de DOGE."}, 500


        # Monitorear TP y SL si la orden fue exitosa
        if order:
            trade_active = True
            threading.Thread(target=monitor_tp_sl, args=(action, entry_price)).start()

        return {"status": "success", "message": "Operación ejecutada."}, 200

    except Exception as e:
        logger.error(f"Error en la recepción de la señal: {e}")
        return {"status": "error", "message": str(e)}, 500


if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

        return {"status": "error", "message": str(e)}, 500

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
